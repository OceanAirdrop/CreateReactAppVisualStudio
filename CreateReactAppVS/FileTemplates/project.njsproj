<Project DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003" ToolsVersion="4.0">
  <PropertyGroup>
    <VisualStudioVersion Condition="'$(VisualStudioVersion)' == ''">14.0</VisualStudioVersion>
    <VSToolsPath Condition="'$(VSToolsPath)' == ''">$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)</VSToolsPath>
    <Name>ReactApp</Name>
    <RootNamespace>ReactApp</RootNamespace>
    <SaveNodeJsSettingsInProjectFile>False</SaveNodeJsSettingsInProjectFile>
    <UseIISExpress>true</UseIISExpress>
  </PropertyGroup>
  <Import Project="$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props" Condition="Exists('$(MSBuildExtensionsPath)\$(MSBuildToolsVersion)\Microsoft.Common.props')" />
  <PropertyGroup>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>184635f5-db8f-4fb5-9ece-d00feb010d86</ProjectGuid>
    <ProjectHome>.</ProjectHome>
    <StartupFile>.</StartupFile>
    <SearchPath>
    </SearchPath>
    <WorkingDirectory>.</WorkingDirectory>
    <OutputPath>.</OutputPath>
    <TargetFrameworkVersion>v4.0</TargetFrameworkVersion>
    <ProjectTypeGuids>{3AF33F2E-1136-4D97-BBB7-1795711AC8B8};{349c5851-65df-11da-9384-00065b846f21};{9092AA53-FB77-4645-B42D-1CCCA6BD08BD}</ProjectTypeGuids>
    <NodejsPort>3000</NodejsPort>
    <StartWebBrowser>False</StartWebBrowser>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>true</DebugSymbols>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Start_Web_Server' ">
    <DebugSymbols>true</DebugSymbols>
  </PropertyGroup>
  
  {{folder_group}}
  {{file_group}}
 
  <Import Project="$(VSToolsPath)\Node.js Tools\Microsoft.NodejsToolsV2.targets" />
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{349c5851-65df-11da-9384-00065b846f21}">
        <WebProjectProperties>
          <UseIIS>True</UseIIS>
          <AutoAssignPort>False</AutoAssignPort>
          <DevelopmentServerPort>0</DevelopmentServerPort>
          <DevelopmentServerVPath>/</DevelopmentServerVPath>
          <IISUrl>http://localhost:53405/</IISUrl>
          <NTLMAuthentication>False</NTLMAuthentication>
          <UseCustomServer>False</UseCustomServer>
          <CustomServerUrl>
          </CustomServerUrl>
          <SaveServerSettingsInUserFile>False</SaveServerSettingsInUserFile>
        </WebProjectProperties>
      </FlavorProperties>
      <FlavorProperties GUID="{349c5851-65df-11da-9384-00065b846f21}" User="">
        <WebProjectProperties>
          <StartPageUrl>
          </StartPageUrl>
          <StartAction>CurrentPage</StartAction>
          <AspNetDebugging>False</AspNetDebugging>
          <SilverlightDebugging>False</SilverlightDebugging>
          <NativeDebugging>False</NativeDebugging>
          <SQLDebugging>False</SQLDebugging>
          <ExternalProgram>
          </ExternalProgram>
          <StartExternalURL>
          </StartExternalURL>
          <StartCmdLineArguments>
          </StartCmdLineArguments>
          <StartWorkingDirectory>
          </StartWorkingDirectory>
          <EnableENC>False</EnableENC>
          <AlwaysStartWebServerOnDebug>False</AlwaysStartWebServerOnDebug>
        </WebProjectProperties>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>

  
  <Target Name="AfterClean">
  </Target>

  <Target Name="AfterCompile">
    <!--  <ExecAsync FilePath="npm.cmd" Arguments="start" />  -->
  </Target>

  <Target Name="AfterCompile" Condition="'$(Configuration)' == 'Start_Web_Server'" >
    <Message Importance="High" Text="$(Configuration)" />
    <Message Importance="High" Text="Running Command: npm start" />
    <ExecAsync FilePath="npm.cmd" Arguments="start" />
  </Target>

  <!-- If the build is RELEASE then run the following commands -->
 <Target Name="AfterBuild" Condition="'$(Configuration)' == 'Release' ">
   <Message Importance="High" Text="Release" />
   <Message Importance="High" Text="Running Command: npm run build" />
   <ExecAsyncWaitForExit FilePath="npm.cmd" Arguments="run build" />
  </Target>

 
  <!-- If the build is debug then runthe following commands -->
  <Target Name="PostBuild" AfterTargets="PostBuildEvent" Condition="'$(Configuration)' == 'Debug'">
    <Message Importance="High" Text="Release" />
    <Message Importance="High" Text="Running Command: npm run build" />
    <ExecAsyncWaitForExit FilePath="npm.cmd" Arguments="run build" />
  </Target>
  
  <!-- https://stackoverflow.com/questions/2387456/msbuild-exec-task-without-blocking -->
  <!--Launch a Process in Parallel-->
  <UsingTask TaskName="ExecAsync" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <!--The file path is the full path to the executable file to run-->
      <FilePath ParameterType="System.String" Required="true" />
      <!--The arguments should contain all the command line arguments that need to be sent to the application-->
      <Arguments ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Code Type="Fragment" Language="cs">
    <![CDATA[
  string name = System.IO.Path.GetFileNameWithoutExtension(FilePath);
  Log.LogMessage(MessageImportance.High, "Starting {0}...", name);        
  System.Diagnostics.ProcessStartInfo processStartInfo = new System.Diagnostics.ProcessStartInfo(FilePath, Arguments);
  processStartInfo.UseShellExecute = true;
  System.Diagnostics.Process.Start(processStartInfo);
  Log.LogMessage(MessageImportance.High, "Finished running process {0}.", name);
  ]]></Code>
    </Task>
  </UsingTask>

  <!-- https://stackoverflow.com/questions/2387456/msbuild-exec-task-without-blocking -->
  <!--Launch a Process in Parallel-->
  <UsingTask TaskName="ExecAsyncWaitForExit" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <!--The file path is the full path to the executable file to run-->
      <FilePath ParameterType="System.String" Required="true" />
      <!--The arguments should contain all the command line arguments that need to be sent to the application-->
      <Arguments ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Code Type="Fragment" Language="cs">
        <![CDATA[
  string name = System.IO.Path.GetFileNameWithoutExtension(FilePath);
  Log.LogMessage(MessageImportance.High, "Starting {0}...", name);        
  System.Diagnostics.ProcessStartInfo processStartInfo = new System.Diagnostics.ProcessStartInfo(FilePath, Arguments);
  processStartInfo.UseShellExecute = true;
  System.Diagnostics.Process process = System.Diagnostics.Process.Start(processStartInfo);
  Log.LogMessage(MessageImportance.High, "Waiting for process to finish");
  process.WaitForExit();
  Log.LogMessage(MessageImportance.High, "Finished running process {0}.", name);
  ]]>
      </Code>
    </Task>
  </UsingTask>
</Project>